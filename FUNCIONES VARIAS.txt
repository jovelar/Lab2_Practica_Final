INSERTAR NODO (LISTA SIMPLE)====================================================================================

nodoDestino* insertarOrdenadoAlfabeticamente(nodoDestino* listaDestinos, nodoDestino *nuevoNodo)
{
    if(listaDestinos==NULL){
        listaDestinos=nuevoNodo;
    }
    else
    {
        if(strcmp(nuevoNodo->nombre,listaDestinos->nombre)<=0)
        {
            nuevoNodo->sig=listaDestinos;
            listaDestinos=nuevoNodo;
        }
        else
        {
            nodoDestino *auxiliar=listaDestinos;
            nodoDestino *anterior=listaDestinos;
            while( auxiliar!=NULL && strcmp(nuevoNodo->nombre,auxiliar->nombre)>=0)
            {
                anterior=auxiliar;
                auxiliar=auxiliar->sig;
            }
            anterior->sig=nuevoNodo;
            nuevoNodo->sig=auxiliar;
        }

    }

    return listaDestinos;
}


INSERTAR NODO RECURSIVO (LISTA SIMPLE)==============================================================================

nodoDestino* insertarOrdenadoAlfabeticamenteRecursivo(nodoDestino* listaDestinos, nodoDestino* nuevoNodo) {
    if (listaDestinos == NULL) {
        listaDestinos = nuevoNodo;
    } else {
        if (strcmp(nuevoNodo->nombre, listaDestinos->nombre) <= 0) {
            nuevoNodo->sig = listaDestinos;
            listaDestinos = nuevoNodo;
        } else {
            listaDestinos->sig = insertarOrdenadoAlfabeticamenteRecursivo(listaDestinos->sig, nuevoNodo);
        }
    }

    return listaDestinos;
}

ORDENAMIENTO POR SELECCION EN LISTAS SIMPLES (REVISAR)==============================================================

nodo* nuevaListaOrdenada(nodo* lista1,nodo* lista2,nodo* lista3)
{
    nodo* seguidora1 = lista1;
    nodo* seguidora2 = lista2;
    nodo* aux;

    while(seguidora1 != NULL && seguidora2 != NULL)
    {
        if(seguidora1->dato > seguidora2->dato)
        {
            aux = seguidora1;
            seguidora1 = seguidora1->siguiente;
            aux->siguiente = NULL;
            lista3 = agregarAlPpio(lista3,aux);
        }
        else
        {
            aux = seguidora2;
            seguidora2 = seguidora2->siguiente;
            aux->siguiente = NULL;
            lista3 = agregarAlPpio(lista3,aux);
        }

    }
    while(seguidora1 != NULL)
    {
        aux = seguidora1;
        seguidora1 = seguidora1->siguiente;
        aux->siguiente = NULL;
        lista3 = agregarAlPpio(lista3,aux);
    }
    while(seguidora2 != NULL)
    {
        aux = seguidora2;
        seguidora2 = seguidora2->siguiente;
        aux->siguiente = NULL;
        lista3 = agregarAlPpio(lista3,aux);
    }

    returnÂ lista3;
}